{"componentChunkName":"component---src-templates-blog-post-js","path":"/customising-rails-templates/","result":{"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"07641554-5fa6-5888-ba3f-a3427ca2aa13","excerpt":"Rails’ generators are a great boon to the Indie HackerTM or Solo DeveloperTM. Running  will quickly bootstrap the full stack for a model, creating the routes…","html":"<p>Rails’ generators are a great boon to the Indie Hacker<sup>TM</sup> or Solo Developer<sup>TM</sup>. Running <code class=\"language-text\">rails g scaffold ...</code> will quickly bootstrap the full stack for a model, creating the routes, controllers, views and even tests.</p>\n<p>As you start customising and standardising your interface though, the default templates get less and less useful - most of the generated code doesn’t fit your layout or setup, and you end up deleting most of it or skipping them.</p>\n<h2>What if we could change the… templates?</h2>\n<p>Rails actually gives you a lot of <a href=\"https://guides.rubyonrails.org/generators.html\">control</a> over the generators, but early on in a project, perhaps the most impactful <em>and</em> simple thing to do is to override the <a href=\"https://guides.rubyonrails.org/generators.html#customizing-your-workflow-by-changing-generators-templates\">templates</a>.</p>\n<p>Let’s look at an example. Normally Rails would generate a <code class=\"language-text\">show.html</code> that looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p id=&quot;notice&quot;&gt;&lt;%= notice %&gt;&lt;/p&gt;\n\n&lt;p&gt;\n  &lt;strong&gt;Attribute:&lt;/strong&gt;\n  &lt;%= @object.attribute %&gt;\n&lt;/p&gt;\n\n&lt;%= link_to &#39;Edit&#39;, edit_object_path(@object) %&gt; |\n&lt;%= link_to &#39;Back&#39;, object_path %&gt;</code></pre></div>\n<p>For a personal project, I’ve made mine generate something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% content_for :breadcrumbs do %&gt;\n  &lt;div class=&quot;...&quot;&gt;\n    Home &gt; &lt;%= @object.attribute %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;\n\n&lt;% content_for :heading do %&gt;\n  &lt;div class=&quot;...&quot;&gt;\n    &lt;h1 class=&quot;...&quot;&gt;\n      &lt;%= @object.name %&gt;\n    &lt;/h1&gt;\n    &lt;div&gt;\n      &lt;%= link_to &#39;Edit object&#39;, edit_object_path(@object), { class: &#39;...&#39; } %&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;\n\n&lt;% content_for :main_content do %&gt;\n  &lt;div class=&quot;...&quot;&gt;\n    &lt;%= @object.attribute %&gt;\n  &lt;/div&gt;\n&lt;% end %&gt;</code></pre></div>\n<p>It’s saved me a lot of time!</p>\n<p>To do so, simply add a template to your Rails project in <code class=\"language-text\">lib/templates/erb/scaffold/show.html.erb</code>. You can use the <a href=\"https://github.com/rails/rails/blob/master/railties/lib/rails/generators/erb/scaffold/templates/show.html.erb.tt\">original</a> as a starting point. The other templates can also be easily changed following a similar path. Note the double percentages (<code class=\"language-text\">%%</code>) used to escape ERB tags!</p>\n<h2>Bonus: Gems too!</h2>\n<p>This also works for your gems that have generators (e.g. <a href=\"https://github.com/rspec/rspec-rails\">rspec-rails</a> or <a href=\"https://github.com/reactjs/react-rails\">react-rails</a>), though it’s not obvious where to place the templates.</p>\n<p>Our answer lies in <a href=\"https://github.com/rails/rails/blob/master/railties/lib/rails/generators/base.rb\"><code class=\"language-text\">Rails::Generators::Base.inherited</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def self.inherited(base) #:nodoc:\n  ...\n  Rails::Generators.templates_path.each do |path|\n    if base.name.include?(&quot;::&quot;)\n      base.source_paths &lt;&lt; File.join(path, base.base_name, base.generator_name)\n    else\n      base.source_paths &lt;&lt; File.join(path, base.generator_name)\n    end\n  end\n  ...\nend</code></pre></div>\n<p>So, in addition to the <code class=\"language-text\">source_root</code> that most Generators would define, Rails will also search a few extra paths. In general, you should place the template in <code class=\"language-text\">lib/templates/&lt;top_level_module&gt;/&lt;generator_class_prefix&gt;/&lt;template_name&gt;</code>.</p>\n<p>For example, <code class=\"language-text\">react-rails</code> has <a href=\"https://github.com/reactjs/react-rails/blob/master/lib/generators/react/component_generator.rb\"><code class=\"language-text\">React::Generators::ComponentGenerator</code></a>, so if I wanted to replace <a href=\"https://github.com/reactjs/react-rails/blob/master/lib/generators/templates/component.es6.jsx\"><code class=\"language-text\">component.es6.jsx</code></a>, I would place it in <code class=\"language-text\">lib/templates/react/component/component.es6.jsx</code>.</p>\n<p>I hope that helps!</p>","frontmatter":{"title":"Customising Rails Templates","date":"November 07, 2020","description":"Overriding the default Rails templates is simple and impactful early on in a project. Find out how."}}},"pageContext":{"slug":"/customising-rails-templates/","previous":{"fields":{"slug":"/first-steps-to-open-source/"},"frontmatter":{"title":"First Steps into Open Source"}},"next":null}},"staticQueryHashes":["240262808","2841359383"]}