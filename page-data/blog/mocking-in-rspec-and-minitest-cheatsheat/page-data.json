{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/mocking-in-rspec-and-minitest-cheatsheat/","result":{"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"84ce21d3-a6ad-514e-a3ab-498adff6b921","excerpt":"My first exposure to testing in Ruby / Rails was through RSpec, but I’m now using Minitest. It wasn’t immediately obvious how to translate rspec-expectations…","html":"<p>My first exposure to testing in Ruby / Rails was through RSpec, but I’m now using Minitest. It wasn’t immediately obvious how to translate rspec-expectations and rspec-mocks to Minitest, so here’s my attempt at a cheatsheet:</p>\n<table>\n<thead>\n<tr>\n<th>RSpec</th>\n<th>minitest with <a href=\"https://github.com/freerange/mocha\">mocha</a></th>\n<th>minitest with <a href=\"https://github.com/seattlerb/minitest#mocks-\">minitest/mocks</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">double</code></td>\n<td><code class=\"language-text\">mock</code> or <code class=\"language-text\">stub</code></td>\n<td><code class=\"language-text\">Minitest::Mock.new</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">instance_double</code></td>\n<td><code class=\"language-text\">stub</code> or <code class=\"language-text\">mock.responds_like_instance_of</code></td>\n<td>Not supported</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">expect().to receive().with().and_return()</code></td>\n<td><code class=\"language-text\">mock.expects().with().returns()</code><br/>Note:<ul><li>like RSpec, can also call <code class=\"language-text\">expects</code> on any object, not just a <code class=\"language-text\">Mock</code>/<code class=\"language-text\">Stub</code></li><li><code class=\"language-text\">with</code> has limited keyword arg support</li></ul></td>\n<td><code class=\"language-text\">mock = Minitest::Mock.new</code><br/><code class=\"language-text\">mock.expects(:method, args, return)</code><br/><code class=\"language-text\">mock.verify</code><br/>Note: cannot call <code class=\"language-text\">expects</code> on any Object, but make a Mock <a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb#L120-L121\">delegate to an underlying object</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">expect().not_to receive()</code></td>\n<td><code class=\"language-text\">mock.expects().never</code></td>\n<td>If it’s a class, technically you could use <a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb#L214\"><code class=\"language-text\">Object#stub</code></a> and raise in the val<em>or</em>callable</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">expect()... and yield_control()</code></td>\n<td><code class=\"language-text\">expects().yields(*parameters)</code> <br/>See <a href=\"https://www.rubydoc.info/github/floehopper/mocha/Mocha%2FExpectation:yields\">docs</a></td>\n<td>Not quite supported since return value is not a callable</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">expect()... and raise_error()</code></td>\n<td><code class=\"language-text\">expects().raises(error)</code> <br/>See <a href=\"https://www.rubydoc.info/github/floehopper/mocha/Mocha%2FExpectation:raises\">docs</a></td>\n<td>Can pass in a block (instead of expected args) to <code class=\"language-text\">expects</code> and raise there</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">allow()...</code></td>\n<td>Similar as above but substitute <code class=\"language-text\">expects</code> with <code class=\"language-text\">stubs</code></td>\n<td>Can use <a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb#L214\"><code class=\"language-text\">Object#stub</code></a> if it’s a class</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.and_call_original</code></td>\n<td>Not supported (see <a href=\"https://github.com/freerange/mocha/issues/334\">reasoning</a>)</td>\n<td>Not supported</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">before</code> / <code class=\"language-text\">after</code></td>\n<td><code class=\"language-text\">setup</code> / <code class=\"language-text\">teardown</code><br/>(standard minitest)</td>\n<td><code class=\"language-text\">setup</code> / <code class=\"language-text\">teardown</code> (standard minitest)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">allow_any_instance_of.Klass</code></td>\n<td><code class=\"language-text\">Klass.any_instance.stubs</code></td>\n<td>Not supported</td>\n</tr>\n</tbody>\n</table>\n<p>Additional Note: Rails minitest is slightly different from pure Minitest <a href=\"https://guides.rubyonrails.org/testing.html\">https://guides.rubyonrails.org/testing.html</a>.</p>\n<p>It’s very possible I’ve gotten something wrong - please feel free to correct in the comments or submit a PR!</p>","frontmatter":{"title":"Mocking in RSpec and Minitest: A Cheatsheet","date":"January 05, 2022","description":"A cheatsheet for those who started off with RSpec expectations and mocks, and now need to translate that to Minitest."}}},"pageContext":{"slug":"/blog/mocking-in-rspec-and-minitest-cheatsheat/","previous":{"fields":{"slug":"/blog/my-learning-workflow-for-2022/"},"frontmatter":{"title":"My Learning Workflow for 2022"}},"next":{"fields":{"slug":"/blog/ruby-metaprogramming-in-the-wild-minitest-mock/"},"frontmatter":{"title":"Ruby Metaprogramming in the Wild: minitest/mock"}}}},"staticQueryHashes":["1003244115","2841359383"]}