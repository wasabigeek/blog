{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/ruby-metaprogramming-in-the-wild-minitest-mock/","result":{"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"8bd1c0b3-ee7d-5210-9b68-bd572d76260d","excerpt":"(repo) is a tiny library (< 250 lines of code, including comments) that happens to be a great showcase for using metaprogramming in Ruby - let’s take a look! If…","html":"<p><code class=\"language-text\">minitest/mock</code> (<a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb\">repo</a>) is a tiny library (&#x3C; 250 lines of code, including comments) that happens to be a great showcase for using <a href=\"https://cs.lmu.edu/~ray/notes/metaprogramming/\">metaprogramming</a> in Ruby - let’s take a look! If you’re new-ish to Ruby, I hope this shows how metaprogramming can be done, using practical examples.</p>\n<h2>Define expected method calls with method_missing</h2>\n<p>The main feature of <code class=\"language-text\">minitest/mock</code> is the <code class=\"language-text\">Mock</code> class, which can be used to test that a method is called, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'minitest/mock'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassUnderTest</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">initialize</span></span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@foo</span> <span class=\"token operator\">=</span> foo\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">call</span></span>\n    <span class=\"token variable\">@foo</span><span class=\"token punctuation\">.</span>bar\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># create an instance of Mock and set an expectation</span>\n<span class=\"token comment\"># that the method `bar` will be called on it</span>\nmock_foo <span class=\"token operator\">=</span> <span class=\"token constant\">Minitest</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Mock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\nmock_foo<span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">(</span><span class=\"token symbol\">:bar</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'example_return_value'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># inject the mock into the Object-Under-Test</span>\n<span class=\"token comment\"># which essentially calls `mock_foo.bar`</span>\n<span class=\"token constant\">ClassUnderTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>mock_foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call <span class=\"token comment\"># => returns 'example_return_value'</span>\n\n<span class=\"token comment\"># check that `bar` was called</span>\nmock_foo<span class=\"token punctuation\">.</span>verify</code></pre></div>\n<p>Notice that there’s nowhere in the <a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb\">library</a> where the method <code class=\"language-text\">bar</code> is explicitly defined in the <code class=\"language-text\">Mock</code> class, yet running the above doesn’t raise any NoMethodErrors. We were able “define” (well, not exactly, but we’ll get to that) a new method even after the mock object was already instantiated via the <code class=\"language-text\">expect</code> call.</p>\n<p>The truth is <code class=\"language-text\">expect</code> (<a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb#L81-L92\">source code</a>) is straightforward Ruby; it saves the expected call to an Array instance variable - no new method gets defined! The magic is the use of Ruby’s <code class=\"language-text\">method_missing</code> (<a href=\"https://github.com/seattlerb/minitest/blob/v5.15.0/lib/minitest/mock.rb#L118\">source code</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># lib/minitest/mock.rb#L118</span>\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">method_missing</span></span> sym<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>block\n  <span class=\"token comment\"># ...</span>\n\n  expected_call <span class=\"token operator\">=</span> <span class=\"token variable\">@expected_calls</span><span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># ...</span>\n\n  <span class=\"token variable\">@actual_calls</span><span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token symbol\">:retval</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> retval<span class=\"token punctuation\">,</span>\n    <span class=\"token symbol\">:args</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> zipped_args<span class=\"token punctuation\">.</span>map<span class=\"token operator\">!</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>mod<span class=\"token punctuation\">,</span> a<span class=\"token operator\">|</span> mod <span class=\"token operator\">===</span> a <span class=\"token operator\">?</span> mod <span class=\"token punctuation\">:</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>If a method is called on a Ruby that doesn’t exist, Ruby will invoke <code class=\"language-text\">method_missing</code> with a few arguments:</p>\n<ul>\n<li>the method’s name in symbol form (<code class=\"language-text\">sym</code> in the above example)</li>\n<li>the arguments (<code class=\"language-text\">*args</code> ) and block (<code class=\"language-text\">&amp;block</code>) passed to the non-existent method</li>\n</ul>\n<p><code class=\"language-text\">Minitest::Mock</code> uses this to catch any method called and check it against the saved expectations.</p>\n<h2>Remove inherited methods via undef_method</h2>\n<p>While <code class=\"language-text\">Minitest::Mock</code> doesn’t explicitly define many methods, it does inherit methods from Ruby’s <code class=\"language-text\">Object</code> class, such as <code class=\"language-text\">#nil?</code>.</p>\n<p>What if we want to check that a mock receives a method call, like <code class=\"language-text\">#nil?</code>? Without any intervention, <code class=\"language-text\">method_missing</code> would <em>not</em> be invoked, since those methods exist! Something like this would happen:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">mock<span class=\"token punctuation\">.</span>expects<span class=\"token punctuation\">(</span><span class=\"token symbol\">:nil?</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nmock<span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token comment\"># => false (this is the default for Object!)</span>\nmock<span class=\"token punctuation\">.</span>verify <span class=\"token comment\"># raises MockExpectationError, because the original `#nil?` method is called instead of `method_missing`!</span></code></pre></div>\n<p>So what the library does here is to undefine them when the class is interpreted. <code class=\"language-text\">instance_methods</code> is used to <em>introspect</em> the class for any instance<em>methods, which are removed via `undef</em>method`:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># class Mock</span>\n<span class=\"token comment\"># L26</span>\ninstance_methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>m<span class=\"token operator\">|</span>\n  undef_method m <span class=\"token keyword\">unless</span> overridden_methods<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> m <span class=\"token operator\">=</span><span class=\"token operator\">~</span> <span class=\"token regex\">/^__/</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Calling <code class=\"language-text\">#nil?</code> now would properly invoke <code class=\"language-text\">method_missing</code>.</p>\n<h2>Redefining Methods with define_method</h2>\n<p>In the code above, we saw that not all <code class=\"language-text\">instance_methods</code> were removed, there are some <code class=\"language-text\">overridden_methods</code> (e.g. <code class=\"language-text\">inspect</code>) where the library opts to keep the default implementation <em>unless</em> the user has explicitly set an expectation:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mock</span>\n  <span class=\"token comment\"># L30</span>\n  overridden_methods<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:to_sym</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>method_id<span class=\"token operator\">|</span>\n    <span class=\"token keyword\">define_method</span> method_id <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token operator\">|</span>\n\t  <span class=\"token keyword\">if</span> <span class=\"token variable\">@expected_calls</span><span class=\"token punctuation\">.</span>key<span class=\"token operator\">?</span> method_id <span class=\"token keyword\">then</span>\n\t\tmethod_missing<span class=\"token punctuation\">(</span>method_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>For the most part, these seem to be so that a <code class=\"language-text\">Minitest::Mock</code> instance still looks like one 😄.</p>\n<h2>Stubbing by redefining methods on “Metaclasses”</h2>\n<p><code class=\"language-text\">minitest/mock</code> also has a stubbing feature, which allows you to redefine the return value of an object within a block:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token builtin\">Time</span><span class=\"token punctuation\">.</span>stub<span class=\"token punctuation\">(</span><span class=\"token symbol\">:now</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin\">Time</span><span class=\"token punctuation\">.</span>now <span class=\"token comment\"># => \"example\"</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token builtin\">Time</span><span class=\"token punctuation\">.</span>now <span class=\"token comment\"># => actual time...</span></code></pre></div>\n<p>Let’s look at the implementation - the library first opens the <code class=\"language-text\">Object</code> class, and defines a <code class=\"language-text\">stub</code> method there:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Object</span>\n  <span class=\"token comment\"># lib/minitest/mock.rb#L214</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">stub</span></span> name<span class=\"token punctuation\">,</span> val_or_callable<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>block_args\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Since <code class=\"language-text\">Object</code> is the ancestor of all (?) Ruby objects (including Classes and Modules), we are able to call <code class=\"language-text\">stub</code> on basically anything. The actual implementation of <code class=\"language-text\">stub</code> is the interesting bit, introducing us to Ruby’s “metaclasses” (also known as “singleton classes” or “eigenclasses”):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Object</span>\n  <span class=\"token comment\"># lib/minitest/mock.rb#L214</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">stub</span></span> name<span class=\"token punctuation\">,</span> val_or_callable<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>block_args\n\tnew_name <span class=\"token operator\">=</span> <span class=\"token string\">\"__minitest_stub__<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>name<span class=\"token delimiter tag\">}</span></span>\"</span>\n\n\tmetaclass <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\n\t<span class=\"token comment\"># ...</span>\n    metaclass<span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:alias_method</span><span class=\"token punctuation\">,</span> new_name<span class=\"token punctuation\">,</span> name\n\n\tmetaclass<span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token operator\">|</span>\n\t  <span class=\"token comment\"># return or execute val_or_callable</span>\n\t<span class=\"token keyword\">end</span>\n\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">self</span>\n  <span class=\"token keyword\">ensure</span>\n    <span class=\"token comment\"># cleanup...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Metaclasses are a pretty deep topic which I am ill-equipped to elaborate on, but one way to look at the above is to replace the following lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">metaclass <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">end</span>\nmetaclass<span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:define_method</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token operator\">|</span>\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>…with:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blk<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>In other words, it redefines the method on the object. The original method is kept safe by renaming it via <code class=\"language-text\">alias_method</code>, and in the <code class=\"language-text\">ensure</code> block, there is code to reverse this change. These ensure that the stubbing only takes effect in it’s block.</p>\n<p>For further reading on metaclasses, check these out:</p>\n<ul>\n<li><a href=\"https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds#metaclasses\">https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds#metaclasses</a></li>\n<li><a href=\"https://medium.com/@leo_hetsch/demystifying-singleton-classes-in-ruby-caf3fa4c9d91\">https://medium.com/@leo_hetsch/demystifying-singleton-classes-in-ruby-caf3fa4c9d91</a></li>\n</ul>","frontmatter":{"title":"Ruby Metaprogramming in the Wild: minitest/mock","date":"January 22, 2022","description":"minitest/mock is a tiny library that nevertheless provides a wealth of examples for metaprogramming in Ruby - let's take a look!"}}},"pageContext":{"slug":"/blog/ruby-metaprogramming-in-the-wild-minitest-mock/","previous":{"fields":{"slug":"/blog/mocking-in-rspec-and-minitest-cheatsheat/"},"frontmatter":{"title":"Mocking in RSpec and Minitest: A Cheatsheet"}},"next":null}},"staticQueryHashes":["1003244115","2841359383"]}