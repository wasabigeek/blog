{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/overspecifying-tests-the-employee-report-kata/",
    "result": {"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"753085c4-d386-5c87-b1ab-9cbc9428a58a","excerpt":"I paired recently with @andyw8 on the Employee Report kata, which illustrates how tests become more difficult to maintain if they are “overspecified”. For such…","html":"<p>I paired recently with <a href=\"https://twitter.com/andyw8\">@andyw8</a> on the <a href=\"https://codingdojo.org/kata/Employee-Report/\">Employee Report kata</a>, which illustrates how tests become more difficult to maintain if they are “overspecified”. For such an unassuming kata, we found a lot to discuss and ponder about. I found his refactoring particularly interesting and wanted to share it.</p>\n<p>⚠️ <strong>STOP</strong>: Before going further, you may want to try the kata for yourself (it’s pretty short!). When I try katas unprompted and then look through someone else’s solution, I either learn more from their solution or can take a more critical viewpoint.</p>\n<h2 id=\"what-is-overspecifying\" style=\"position:relative;\"><a href=\"#what-is-overspecifying\" aria-label=\"what is overspecifying permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is overspecifying?</h2>\n<p>At least in the context of the kata, overspecification is when a test unintentionally (or intentionally) tests more than it should. This couples the test to those additional behaviours, causing the test to fail if those behaviours change. Walking through the kata gives us some great examples, so let’s dive into it!</p>\n<h2 id=\"first-requirement-18-and-above\" style=\"position:relative;\"><a href=\"#first-requirement-18-and-above\" aria-label=\"first requirement 18 and above permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First Requirement: 18 and above</h2>\n<p>Given some employee data, we first want to exclude employees &#x3C;18 years of age from working on Sundays:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Max'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># exclude</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Nina'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># exclude</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Because the kata encourages us not to look at future requirements, we might write a test like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Max'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Nina'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n  \n    assert_equal <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>employee<span class=\"token operator\">|</span> employee<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And then get it <a href=\"https://github.com/wasabigeek/katas/pull/4/commits/afd4bc1b0dd5eb80d4514d2464959dba2b3da962\">passing</a>.</p>\n<h2 id=\"second-requirement-sorted-names\" style=\"position:relative;\"><a href=\"#second-requirement-sorted-names\" aria-label=\"second requirement sorted names permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Second Requirement: Sorted Names</h2>\n<p>The second requirement is to sort employees by name. We write another failing test:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_result_sorted_by_name</span></span>\n    <span class=\"token comment\"># include only employees that are >18 to keep the test focused.</span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n\n    <span class=\"token comment\"># the only difference in the assertion from the previous test is the order.</span>\n    <span class=\"token comment\"># the requirement wasn't specific, so we default to alphabetical order. </span>\n    assert_equal <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>employee<span class=\"token operator\">|</span> employee<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>To get it passing, we do a small <a href=\"https://github.com/wasabigeek/katas/pull/4/commits/4ba5627a4dfb328356f56a3d8d704931b4a6e31e\">refactor</a> before <a href=\"https://github.com/wasabigeek/katas/pull/4/commits/195588d660ca67865a39e2703acfd51b6d2c5f51\">addressing the requirement</a>… <strong>only to have the first test fail</strong>. This is in spite of the logic being accurate (our results still only exclude employees &#x3C;18 years) and makes it clear that our first test also implicitly tested the ordering.</p>\n<p>To fix the first test, we could <code class=\"language-text\">sort</code> both expected and actual arguments, but a more explicit (and slightly verbose) way is to use assertions that better capture our intent:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    <span class=\"token comment\"># ...</span>\n  \n    result_names <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>employee<span class=\"token operator\">|</span> employee<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    assert_includes result_names<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span>\n    assert_includes result_names<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span>\n    refute_includes result_names<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Max'</span></span>\n    refute_includes result_names<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'Nina'</span></span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_result_sorted_by_name</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This decouples the first test from the ordering of the result, but there is still at least one hidden coupling…</p>\n<h2 id=\"third-requirement-all-caps\" style=\"position:relative;\"><a href=\"#third-requirement-all-caps\" aria-label=\"third requirement all caps permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Third Requirement: All Caps</h2>\n<p>Now, we have to capitalize all the names:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_result_sorted_by_name</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_results_are_capitalised</span></span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n\n    <span class=\"token comment\"># OK, you got us, we are potentially overspecifying here too 😝.</span>\n    assert_equal <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'MIKE'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'SEPP'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>employee<span class=\"token operator\">|</span> employee<span class=\"token punctuation\">[</span><span class=\"token symbol\">:name</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span> \n<span class=\"token keyword\">end</span></code></pre></div>\n<p>We naively implement the third requirement with some <a href=\"https://github.com/wasabigeek/katas/pull/4/commits/6505cdd7c44f92a0e201a76f406351bf002cb556\">ugly code</a>. Our new test passes, but guess what? <strong>Our first two tests are now failing</strong> 😔. Turns out they were also implicitly testing that an employee’s attribute was in a certain format, when all we actually wanted to check was that the employee itself was included (properties VS identity?).</p>\n<h2 id=\"optional-refactoring-to-objects\" style=\"position:relative;\"><a href=\"#optional-refactoring-to-objects\" aria-label=\"optional refactoring to objects permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional: Refactoring to Objects</h2>\n<p>Now we could simply change all the tests to check for capitalized names, but I thought the refactoring @andyw8 proposed was very cool (though you can poke holes in it, see the <a href=\"/blog/overspecifying-tests-the-employee-report-kata/#afterword\">afterword</a>). Could we get the tests to compare the “identity” of the employees, instead of one of their attributes? e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\"># note the new Employee class.</span>\n      <span class=\"token comment\"># (also, tried to minimise test data even more.)</span>\n      max <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Max'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      sepp <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      mike <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n    <span class=\"token comment\"># now this test doesn't rely on the attributes of an employee!</span>\n    assert_includes result<span class=\"token punctuation\">,</span> sepp\n    assert_includes result<span class=\"token punctuation\">,</span> mike\n    refute_includes result<span class=\"token punctuation\">,</span> max\n  <span class=\"token keyword\">end</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_result_sorted_by_name</span></span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      sepp <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      mike <span class=\"token operator\">=</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Mike'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n    assert_equal <span class=\"token punctuation\">[</span>mike<span class=\"token punctuation\">,</span> sepp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_results_are_capitalised</span></span>\n    employees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">name</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'Sepp'</span></span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    result <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeReport</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sunday_allowed_employees\n    assert_equal result<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'SEPP'</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Note that some liberties were taken since the requirements gave us a lot of autonomy: we assumed that we had some way to convert the input (an array of hashes) into objects, and that the output could also be a set of objects.</p>\n<p>In the context of the kata, this refactoring is optional because the way the final requirement is written doesn’t require it. But it’s a really good example of how we can encapsulate logic in objects! I did have to take quite a few steps (you can follow the <a href=\"https://github.com/wasabigeek/katas/commits/employee-report\">PR</a> history) to “safely” refactor, but the end result is quite satisfying.</p>\n<h2 id=\"fourth-requirement-sort-descending\" style=\"position:relative;\"><a href=\"#fourth-requirement-sort-descending\" aria-label=\"fourth requirement sort descending permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fourth Requirement: Sort Descending</h2>\n<p>We now want the names to be in descending order. Since we already have a test for ordering, we can modify that instead of creating a new one:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeReportTest</span> <span class=\"token operator\">&lt;</span> Minitest<span class=\"token double-colon punctuation\">::</span>Test\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_return_employees_older_than_18</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_result_sorted_by_names_descending</span></span>\n    <span class=\"token comment\"># ...</span>\n\n    <span class=\"token comment\"># swap the ordering</span>\n    assert_equal <span class=\"token punctuation\">[</span>sepp<span class=\"token punctuation\">,</span> mike<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_results_are_capitalised</span></span>\n    <span class=\"token comment\"># ...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>With the newly refactored Employee class, we can <a href=\"https://github.com/wasabigeek/katas/pull/4/commits/6fac6fb78bbee0aac80ad722ee997db28a45ed24\">modify the comparison method</a> <code class=\"language-text\">&lt;=></code> (a.k.a. the “spaceship” operator). This time, <strong>we have successfully defeated overspecification</strong> - none of our other tests fail!</p>\n<p>Or have we?</p>\n<h2 id=\"takeaways\" style=\"position:relative;\"><a href=\"#takeaways\" aria-label=\"takeaways permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Takeaways</h2>\n<p>I don’t think most of us <em>intentionally</em> overspecify our tests, so this kata is more a reminder to compare what we’re <em>actually</em> testing VS what we <em>want</em> to test. Could we be more specific?</p>\n<p>From the kata, some possible heuristics (we all know that heuristics don’t always work, right?):</p>\n<ul>\n<li>when checking for the presence of an object in a result, avoid comparing the arrays/enumerables directly.</li>\n<li>when comparing objects, avoid comparing by their attributes and try to find some way to compare their identity instead.</li>\n</ul>\n<h2 id=\"afterword\" style=\"position:relative;\"><a href=\"#afterword\" aria-label=\"afterword permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Afterword</h2>\n<p>I had a lot of fun doing this kata, and @andyw8’s refactoring reminded me of why I appreciate object-oriented programming. That said, there are some decisions made in the refactoring that can be debated or improved:</p>\n<ul>\n<li><code class=\"language-text\">Employee#name</code> always returns the capitalized name. This might not be an assumption we want to apply application-wide (e.g. what if we wanted another report that only capitalizes the initials), and could be considered too pre-emptive.</li>\n<li><code class=\"language-text\">Employee#&lt;=></code> could be similarly argued, though IMO this seems more broadly applicable across an application as a “default” sort.</li>\n<li>In our tests, we are relying on comparison of the Ruby object ids, meaning that the EmployeeReport class <em>must</em> return the exact instances that were passed into it. If some step in between created new instances (e.g. for immutability), these tests would fail. (I think this can be easily resolved through adding <code class=\"language-text\">Employee#==</code> though.)</li>\n</ul>\n<p>For the first two points, we won’t truly know if the refactor was “right” or “wrong” until we get new requirements! So, <a href=\"https://wasabigeek.com/blog/coupling-and-cohesion-is-a-tradeoff/#refactoring-is-important\">observe future changes, and continue to refactor if necessary</a>.</p>\n<p>There are also some decisions that could be worth expounding on… another time:</p>\n<ul>\n<li>not memoizing the array of employee data, instead choosing to “duplicate” for each test (eventually we purposefully changed the data for each test).</li>\n<li>choosing to have many focused tests, when perhaps one big test might have achieved a similar result.</li>\n</ul>","frontmatter":{"title":"Overspecifying Tests - the Employee Report Kata","date":"June 22, 2022","description":"Overspecification is when a test unintentionally tests more than it should. Why is this bad? Let's walk through a short kata that brings this to life."}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"I paired recently with @andyw8 on the Employee Report kata, which illustrates how tests become more difficult to maintain if they are…","fields":{"slug":"/blog/overspecifying-tests-the-employee-report-kata/"},"frontmatter":{"date":"June 22, 2022","title":"Overspecifying Tests - the Employee Report Kata","description":"Overspecification is when a test unintentionally tests more than it should. Why is this bad? Let's walk through a short kata that brings this to life."}}},{"node":{"excerpt":"In software, coupling is often described as something intrinsic and fixed: code is either coupled or not. I’ve had this viewpoint challenged…","fields":{"slug":"/blog/coupling-and-cohesion-is-a-tradeoff/"},"frontmatter":{"date":"June 08, 2022","title":"Coupling is a Tradeoff","description":"Coupling is usually described as something intrinsic: code is either coupled or not. But Kent Beck argues that it is always with respect to a particular change. What does that mean for us?"}}},{"node":{"excerpt":"If you’re trying to get more productive at writing or content creation (especially long-form), I highly recommend checking out How to take…","fields":{"slug":"/blog/zettelkasten-and-how-to-take-smart-notes/"},"frontmatter":{"date":"April 16, 2022","title":"Zettelkasten from \"How to take Smart Notes\"","description":"A review and summary of 'How to take Smart Notes' and the Zettelkasten process described within. I think of it as purposeful note-taking, used to generate ideas for writing or content creation."}}}]}},"pageContext":{"slug":"/blog/overspecifying-tests-the-employee-report-kata/","previous":{"fields":{"slug":"/blog/coupling-and-cohesion-is-a-tradeoff/"},"frontmatter":{"title":"Coupling is a Tradeoff","tags":["software-design","coupling-and-cohesion"]}},"next":null,"relatedPosts":[{"node":{"fields":{"slug":"/blog/practical-metaprogramming-in-ruby-minitest-mock/"},"frontmatter":{"title":"Practical Metaprogramming in Ruby: minitest/mock","tags":["ruby","metaprogramming","testing"]}}},{"node":{"fields":{"slug":"/blog/mocking-in-rspec-and-minitest-cheatsheat/"},"frontmatter":{"title":"Mocking in RSpec VS Minitest: A Cheatsheet","tags":["ruby","rails","testing"]}}}]}},
    "staticQueryHashes": ["2744205926","2841359383"]}