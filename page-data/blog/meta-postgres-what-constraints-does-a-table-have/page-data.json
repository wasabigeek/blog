{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/meta-postgres-what-constraints-does-a-table-have/",
    "result": {"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"d637d024-f2a0-50aa-b6c0-94b7b1bed2f7","excerpt":"TIL that checking the structure of your database is just another query away! I needed to find whether a CHECK constraint existed and learnt that Postgres has‚Ä¶","html":"<p>TIL that checking the structure of your database is just another query away! I needed to find whether a CHECK constraint existed and learnt that Postgres has <a href=\"https://www.postgresql.org/docs/current/information-schema.html\">information_schema</a> views and <a href=\"https://www.postgresql.org/docs/current/catalogs.html\">system catalogs</a> which you can query like regular tables.</p>\n<p>The <code class=\"language-text\">information_schema</code> is actually defined by the SQL standard, so other SQL-compliant databases should have them too. I tried looking first at <a href=\"https://www.postgresql.org/docs/current/infoschema-columns.html\">columns</a>, then <a href=\"https://www.postgresql.org/docs/current/infoschema-constraint-column-usage.html\">constraint_column_usage</a>. Neither had quite what I was looking for, as they did not include the constraint definition.</p>\n<p>Then I found out that each <code class=\"language-text\">information_schema</code> is actually just a view based upon Postgres‚Äô <a href=\"https://postgresql.org/docs/13/interactive/catalogs-overview.html\">system catalog</a> tables ü§Ø For example, check out the SQL for <a href=\"https://github.com/postgres/postgres/blob/272d82ec6febb97ab25fd7c67e9c84f4660b16ac/src/backend/catalog/information_schema.sql#L801\">constraint_column_usage</a>.</p>\n<p>This meant I had the building blocks to make exactly what I needed! The <code class=\"language-text\">pg_node_tree</code> column contains a representation of the CHECK definition, which can be parsed with <code class=\"language-text\">pg_get_constraintdef</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> pg_get_constraintdef<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> c<span class=\"token punctuation\">.</span>oid\n  <span class=\"token keyword\">FROM</span>   pg_constraint c\n  <span class=\"token keyword\">WHERE</span>  c<span class=\"token punctuation\">.</span>conrelid <span class=\"token operator\">=</span> <span class=\"token string\">'my_table'</span>::regclass\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Note to self: the additional parentheses is to evaluate the select result as a value expression / scalar, as opposed to a table.)</p>\n<p>That would give you a result like:</p>\n<table>\n<thead>\n<tr>\n<th>pg_get_constraintdef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">CHECK ((description &lt;> ''::text))</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"appendix\" style=\"position:relative;\"><a href=\"#appendix\" aria-label=\"appendix permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appendix</h2>\n<h3 id=\"pro-tips\" style=\"position:relative;\"><a href=\"#pro-tips\" aria-label=\"pro tips permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pro-Tips</h3>\n<p>Twitter user <a href=\"https://twitter.com/ascherbaum\">ascherbaum</a> has pointed out that when using <code class=\"language-text\">psql</code>, you can use <code class=\"language-text\">-e -E</code> arguments to show the underlying SQL which Postgres uses. Pretty neat!</p>\n<h3 id=\"follow-up-questions\" style=\"position:relative;\"><a href=\"#follow-up-questions\" aria-label=\"follow up questions permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Follow-up Questions</h3>\n<ul>\n<li>Are the catalogs stored like any other table, or is there some magic that makes them table-like?</li>\n<li>Does pg_get_constraintdef work with other types of constraints? The docs suggest not.</li>\n</ul>","frontmatter":{"title":"Meta-Postgres: What constraints does a table have?","date":"May 16, 2021","description":"TIL about information_schema and system catalogs that you can use to query the structure of the database itself."}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"When I first came across the concept of Polymorphism in Object-Oriented Programming (OOP), it wasn‚Äôt obvious to me why it was important. The‚Ä¶","fields":{"slug":"/blog/why-is-polymorphism-important/"},"frontmatter":{"date":"March 20, 2022","title":"Why use Polymorphism in OOP?","description":"Polymorphism in Object-Oriented Programming, while abstract, is still somewhat easy to understand. Why we should use it, though, is less obvious. Let's investigate polymorphism's benefits!"}}},{"node":{"excerpt":"‚ÄùA class should only have one reason to change‚Äù is a mantra that Object-Oriented advocates have chanted for years. Dubbed the ‚ÄúSingle‚Ä¶","fields":{"slug":"/blog/what-does-a-1972-paper-have-to-do-with-the-single-responsibility-principle/"},"frontmatter":{"date":"February 28, 2022","title":"A 1972 paper and the Single Responsibility Principle","description":"While trying to explain the Single Responsibility Principle, it's originator calls attention to the paper 'On the Criteria To Be Used in Decomposing Systems into Modules'. Why was this paper so significant? Let's find out!"}}},{"node":{"excerpt":"Whether out of curiosity or trying to understand a method for debugging, it‚Äôs helpful to know how to dig into a Ruby gem. Recently I was‚Ä¶","fields":{"slug":"/blog/reading-a-ruby-gem-with-vscode/"},"frontmatter":{"date":"February 15, 2022","title":"Reading a Ruby gem with VSCode","description":"Steps to try when investigating a gem's implementation in VSCode, using mocha's any_instance as an example."}}}]}},"pageContext":{"slug":"/blog/meta-postgres-what-constraints-does-a-table-have/","previous":{"fields":{"slug":"/blog/dont-give-up-on-your-rails-generators/"},"frontmatter":{"title":"Don‚Äôt give up on your Rails Generators!","tags":["rails-generators"]}},"next":{"fields":{"slug":"/blog/til-extending-a-ruby-struct/"},"frontmatter":{"title":"TIL: Extending a Ruby Struct","tags":null}},"relatedPosts":[{"node":{"fields":{"slug":"/blog/window-functions-visualised-rankings/"},"frontmatter":{"title":"Window Functions, Visualised - Rankings","tags":["postgres","window-functions"]}}},{"node":{"fields":{"slug":"/blog/window-function-calls-an-introduction/"},"frontmatter":{"title":"Window Function Calls in Postgres - A Visual Introduction","tags":["postgres","window-functions"]}}}]}},
    "staticQueryHashes": ["2744205926","2841359383"]}