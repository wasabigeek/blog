{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/meta-postgres-what-constraints-does-a-table-have/","result":{"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"d637d024-f2a0-50aa-b6c0-94b7b1bed2f7","excerpt":"TIL that checking the structure of your database is just another query away! I needed to find whether a CHECK constraint existed and learnt that Postgres hasâ€¦","html":"<p>TIL that checking the structure of your database is just another query away! I needed to find whether a CHECK constraint existed and learnt that Postgres has <a href=\"https://www.postgresql.org/docs/current/information-schema.html\">information_schema</a> views and <a href=\"https://www.postgresql.org/docs/current/catalogs.html\">system catalogs</a> which you can query like regular tables.</p>\n<p>The <code class=\"language-text\">information_schema</code> is actually defined by the SQL standard, so other SQL-compliant databases should have them too. I tried looking first at <a href=\"https://www.postgresql.org/docs/current/infoschema-columns.html\">columns</a>, then <a href=\"https://www.postgresql.org/docs/current/infoschema-constraint-column-usage.html\">constraint_column_usage</a>. Neither had quite what I was looking for, as they did not include the constraint definition.</p>\n<p>Then I found out that each <code class=\"language-text\">information_schema</code> is actually just a view based upon Postgresâ€™ <a href=\"https://postgresql.org/docs/13/interactive/catalogs-overview.html\">system catalog</a> tables ðŸ¤¯ For example, check out the SQL for <a href=\"https://github.com/postgres/postgres/blob/272d82ec6febb97ab25fd7c67e9c84f4660b16ac/src/backend/catalog/information_schema.sql#L801\">constraint_column_usage</a>.</p>\n<p>This meant I had the building blocks to make exactly what I needed! The <code class=\"language-text\">pg_node_tree</code> column contains a representation of the CHECK definition, which can be parsed with <code class=\"language-text\">pg_get_constraintdef</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> pg_get_constraintdef<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> c<span class=\"token punctuation\">.</span>oid\n  <span class=\"token keyword\">FROM</span>   pg_constraint c\n  <span class=\"token keyword\">WHERE</span>  c<span class=\"token punctuation\">.</span>conrelid <span class=\"token operator\">=</span> <span class=\"token string\">'my_table'</span>::regclass\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Note to self: the additional parentheses is to evaluate the select result as a value expression / scalar, as opposed to a table.)</p>\n<p>That would give you a result like:</p>\n<table>\n<thead>\n<tr>\n<th>pg_get_constraintdef</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">CHECK ((description &lt;&gt; &#39;&#39;::text))</code></td>\n</tr>\n</tbody>\n</table>\n<p>Follow-up Questions:</p>\n<ul>\n<li>Are the catalogs stored like any other table, or is there some magic that makes them table-like?</li>\n<li>Does pg_get_constraintdef work with other types of constraints? The docs suggest not.</li>\n</ul>","frontmatter":{"title":"Meta-Postgres: What constraints does a table have?","date":"May 16, 2021","description":"TIL about information_schema and system catalogs that you can use to query the structure of the database itself."}}},"pageContext":{"slug":"/blog/meta-postgres-what-constraints-does-a-table-have/","previous":{"fields":{"slug":"/blog/dont-give-up-on-your-rails-generators/"},"frontmatter":{"title":"Donâ€™t give up on your Rails Generators!"}},"next":null}},"staticQueryHashes":["1003244115","2841359383"]}