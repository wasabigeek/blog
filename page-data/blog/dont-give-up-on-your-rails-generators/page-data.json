{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/dont-give-up-on-your-rails-generators/",
    "result": {"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"65e97c7d-2e14-553f-bd43-2bfe6d31b44d","excerpt":"Many Rails devs I’ve spoken to quickly abandon the built-in generators. The common reason? Generated files no longer suit the project, so it’s easier to start…","html":"<p>Many Rails devs I’ve spoken to quickly abandon the built-in generators. The common reason? Generated files no longer suit the project, so it’s easier to start from scratch or copy and paste. This is a pity, as generators can <strong>improve team productivity</strong> and <strong>encourage consistency</strong>, and it’s actually quite straightforward to modify them.</p>\n<p>The Rails docs cover customising generators, but it can feel like a lot to understand if all you want is to make some small tweaks. An easy approach is to copy and override the existing generator, which I’ll walk through in this post.</p>\n<h2 id=\"tldr-on-overriding-rails-generators\" style=\"position:relative;\"><a href=\"#tldr-on-overriding-rails-generators\" aria-label=\"tldr on overriding rails generators permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR on overriding Rails Generators</h2>\n<ul>\n<li>Copy over the Generator classes to <code class=\"language-text\">/lib/generators/...</code> and modify</li>\n<li>Copy over the template file to <code class=\"language-text\">/lib/templates/...</code> and modify</li>\n<li>Bonus: Use <code class=\"language-text\">hook_for</code> to generate a test file if the generator doesn’t do it automatically</li>\n</ul>\n<h2 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p>At work, we use rake tasks quite a fair bit, both for cron-like jobs and one-off migration or support tasks. Rails has a built-in <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/USAGE\">task generator</a>, with the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/rails g task file_name <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span></code></pre></div>\n<p>It’s never quite worked for us:</p>\n<ul>\n<li>We like to keep one task “action” per file, with the file named the same as the action - this makes it easier to grep for the task. The built-in generator requires separate <code class=\"language-text\">file_name</code> and <code class=\"language-text\">action</code> arguments, which is a little unnecessary.</li>\n<li>We sometimes namespace tasks e.g. with a “onetime” namespace for one-off tasks, but the built-in generator ignores paths in the <code class=\"language-text\">file_name</code> and also uses the <code class=\"language-text\">file_name</code> as the namespace.</li>\n<li>We write tests for our rake tasks, but the generator doesn’t create test files.</li>\n</ul>\n<p>Let’s address these! We chose to override the built-in generator entirely, but you could also create a new generator instead.</p>\n<h2 id=\"overriding-the-task-generator\" style=\"position:relative;\"><a href=\"#overriding-the-task-generator\" aria-label=\"overriding the task generator permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding the Task Generator</h2>\n<p>Rails searches for generators in a <a href=\"https://guides.rubyonrails.org/generators.html#generators-lookup\">few paths</a>, so as long as we place our file in <code class=\"language-text\">/lib/generators/task/task_generator.rb</code>, Rails will load our custom file instead. (Note: if you wanted to create a new generator instead, rename the files and classes according to the lookup logic above!)</p>\n<p>To start, copy over the original task generator to use as a base. Most of the default generators can be found in <code class=\"language-text\">railties/lib/rails/generators/rails</code>, the one we’re after is <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/task_generator.rb\">here</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Rails</span>\n  <span class=\"token keyword\">module</span> <span class=\"token class-name\">Generators</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskGenerator</span> <span class=\"token operator\">&lt;</span> NamedBase <span class=\"token comment\"># :nodoc:</span>\n      argument <span class=\"token symbol\">:actions</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">type</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:array</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">banner</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"action action\"</span></span>\n    \n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_task_files</span></span>\n        template <span class=\"token string-literal\"><span class=\"token string\">\"task.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"lib/tasks\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">file_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">.rake\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    \n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Copy it over to <code class=\"language-text\">/lib/rails/generators/task/task_generator.rb</code> in your project. As a simple sanity check to see if we’ve overridden the class, let’s make the generator spit out a hardcoded file name. Change this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">template <span class=\"token string-literal\"><span class=\"token string\">\"task.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"lib/tasks\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"hardcoded_file_name.rake\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then run the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/rails g task path/to/my_task\n<span class=\"token comment\"># create lib/tasks/hardcoded_file_name.rake</span></code></pre></div>\n<p>It works! Revert the hardcoding and leave the rest of the class as-is for now. We’ll be back, promise.</p>\n<h2 id=\"overriding-the-generator-template\" style=\"position:relative;\"><a href=\"#overriding-the-generator-template\" aria-label=\"overriding the generator template permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding the Generator Template</h2>\n<p>We want a custom template as well, so let’s override that. When invoked, generators search for templates in a different set of paths from the invoker (I explored this more in another <a href=\"https://wasabigeek.com/blog/customising-generator-templates-in-rails-gems-too/\">post</a>, this works for templates from gems as well!) - we’ll be wanting to place our template at <code class=\"language-text\">/lib/templates/rails/task/task.rb.tt</code>.</p>\n<p>Copy the <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/templates/task.rb.tt\">original</a> and modify it as such - the lack of indentation is intentional:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% class_path.each_with_index do |path_fragment, index| -%>\n&lt;%= indent(\"namespace :#{path_fragment}\", index * 2) %> do\n&lt;% end -%>\n&lt;% content = capture do -%>\ndesc \"TODO\"\ntask &lt;%= file_name %>: :environment do\nend\n&lt;% end -%>\n&lt;%= indent(content, class_path.size * 2) %>\n&lt;% (0...class_path.size).reverse_each do |index| -%>\n&lt;%= indent('end', index * 2) %>\n&lt;% end -%></code></pre></div>\n<p>Let’s breakdown the changes. The outer tags implement our desired name-spacing, including the indentation (note that <code class=\"language-text\">indent</code> is actually a private method on <code class=\"language-text\">Rails::Generators::Base</code>, so you won’t be able to use it in your regular view templates):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% class_path.each_with_index do |path_fragment, index| -%>\n&lt;%= indent(\"namespace :#{path_fragment}\", index * 2) %> do\n&lt;% end -%>\n...\n&lt;% (0...class_path.size).reverse_each do |index| -%>\n&lt;%= indent('end', index * 2) %>\n&lt;% end -%></code></pre></div>\n<p>With the previous command <code class=\"language-text\">bin/rails g task path/to/my_task</code>, the above namespaces the task correctly:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># /lib/tasks/my_task.rake</span>\n<span class=\"token comment\"># file is in the wrong location, but we'll sort this out later</span>\nnamespace <span class=\"token symbol\">:path</span> <span class=\"token keyword\">do</span>\n  namespace <span class=\"token symbol\">:to</span> <span class=\"token keyword\">do</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>The enclosed tags and code are for the actual task:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;% content = capture do -%>\ndesc \"TODO\"\ntask &lt;%= file_name %>: :environment do\nend\n&lt;% end -%>\n&lt;%= indent(content, class_path.size * 2) %>\n...</code></pre></div>\n<p>Here, we indent the task description strings by first assigning it to a variable, <code class=\"language-text\">content</code> via the <code class=\"language-text\">capture</code> helper. Then, we indent and insert it into the file. So running the command again will give us:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">namespace <span class=\"token symbol\">:path</span> <span class=\"token keyword\">do</span>\n  namespace <span class=\"token symbol\">:to</span> <span class=\"token keyword\">do</span>\n    desc <span class=\"token string-literal\"><span class=\"token string\">\"TODO\"</span></span>\n    task my_task<span class=\"token operator\">:</span> <span class=\"token symbol\">:environment</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>Our file is still being created as <code class=\"language-text\">/lib/tasks/my_task.rake</code> though, instead of <code class=\"language-text\">/lib/tasks/path/to/my_task.rake</code>.</p>\n<h2 id=\"fixing-the-generated-path\" style=\"position:relative;\"><a href=\"#fixing-the-generated-path\" aria-label=\"fixing the generated path permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixing the Generated Path</h2>\n<p>To fix the path, we make some changes to the generator:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">4,5d3</span>\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span> argument :actions, type: :array, default: [], banner: \"action action\"\n<span class=\"token prefix deleted\"><</span>\n</span><span class=\"token coord\">7c5</span>\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span> template \"task.rb\", File.join(\"lib/tasks\", \"#{file_name}.rake\")\n</span><span class=\"token coord\">---</span>\n<span class=\"token inserted-arrow inserted\"><span class=\"token prefix inserted\">></span> template \"task.rb\", File.join(\"lib/tasks\", class_path, \"#{file_name}.rake\")</span></code></pre></div>\n<p>Above, we’ve removed the unnecessary <code class=\"language-text\">actions</code> argument and added the <code class=\"language-text\">class_path</code> to the generated file’s path. Running the command again nests the file in the right folder now.</p>\n<h2 id=\"hooking-in-a-test-file\" style=\"position:relative;\"><a href=\"#hooking-in-a-test-file\" aria-label=\"hooking in a test file permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooking in a Test file</h2>\n<p>“Should you test rake tasks?”… is not a discussion for this article, let’s assume you do! The built-in generator doesn’t create a test file, but we can use <a href=\"https://api.rubyonrails.org/v6.1.3/classes/Rails/Generators/Base.html#method-c-hook_for\">hook_for</a>, which lets the generator invoke other generators. Add the following DSL to your generator class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">hook_for <span class=\"token symbol\">:test_framework</span></code></pre></div>\n<p>This attempts to invoke <code class=\"language-text\">Rspec::Generators::TaskGenerator</code>, which… doesn’t exist yet. Let’s resolve that.</p>\n<h2 id=\"adding-rspec-generator-and-template\" style=\"position:relative;\"><a href=\"#adding-rspec-generator-and-template\" aria-label=\"adding rspec generator and template permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding RSpec Generator and Template</h2>\n<p>RSpec doesn’t have a custom generator for tasks, but the steps for overriding it are more or less the same. Let’s start by creating the TaskGenerator class in <code class=\"language-text\">/lib/generators/rspec/task/task_generator.rb</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># frozen_string_literal: true</span>\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'generators/rspec'</span></span>\n\n<span class=\"token keyword\">module</span> <span class=\"token class-name\">Rspec</span>\n  <span class=\"token keyword\">module</span> <span class=\"token class-name\">Generators</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskGenerator</span> <span class=\"token operator\">&lt;</span> Base <span class=\"token comment\"># :nodoc:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_task_specs</span></span>\n        template <span class=\"token string-literal\"><span class=\"token string\">\"task_spec.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"spec/tasks\"</span></span><span class=\"token punctuation\">,</span> class_path<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">file_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">_rake_spec.rb\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Next, we need to create the corresponding template in <code class=\"language-text\">/lib/templates/rspec/task/task_spec.rb.tt</code> (we can definitely DRY this out more, you might be able to draw some inspiration from these examples by <a href=\"https://thoughtbot.com/blog/test-rake-tasks-like-a-boss\">Thoughtbot</a> and <a href=\"https://blog.10pines.com/2019/01/14/testing-rake-tasks/\">10Pines</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'rails_helper'</span></span>\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'rake'</span></span>\n\ndescribe <span class=\"token string-literal\"><span class=\"token string\">'&lt;%= class_path.join('</span></span><span class=\"token operator\">:</span><span class=\"token string-literal\"><span class=\"token string\">') %>'</span></span> <span class=\"token keyword\">do</span>\n  describe <span class=\"token string-literal\"><span class=\"token string\">':&lt;%= file_name %>'</span></span> <span class=\"token keyword\">do</span>\n    before<span class=\"token punctuation\">(</span><span class=\"token symbol\">:all</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      Rake<span class=\"token double-colon punctuation\">::</span>Task<span class=\"token punctuation\">.</span>define_task<span class=\"token punctuation\">(</span><span class=\"token symbol\">:environment</span><span class=\"token punctuation\">)</span>\n      Rake<span class=\"token punctuation\">.</span>application <span class=\"token operator\">=</span> rake <span class=\"token operator\">=</span> Rake<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      rake<span class=\"token punctuation\">.</span>rake_require <span class=\"token string-literal\"><span class=\"token string\">'tasks/&lt;%= File.join(class_path, file_name) %>'</span></span>\n      <span class=\"token variable\">@task</span> <span class=\"token operator\">=</span> rake<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'&lt;%= class_path.concat([file_name]).join('</span></span><span class=\"token operator\">:</span><span class=\"token string-literal\"><span class=\"token string\">') %>'</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n    \n    it <span class=\"token string-literal\"><span class=\"token string\">'works'</span></span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@task</span><span class=\"token punctuation\">.</span>execute\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>With that done, running the generator command now creates the files just as we wanted. Neat!</p>\n<h2 id=\"go-forth-and-generate\" style=\"position:relative;\"><a href=\"#go-forth-and-generate\" aria-label=\"go forth and generate permalink\" class=\"autolink-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Go forth and generate!</h2>\n<p>I hope this has given you some inspiration to give generators a second chance - with a little tweaking, they can be really useful in saving time for you and your team. What ideas do you have for improving your generators?</p>","frontmatter":{"title":"Don’t give up on your Rails Generators - customise them instead!","date":"March 14, 2021","description":"Most devs quickly stop using Rail's built-in generators. This is a pity, as generators can help improve team productivity - we just need to tweak them. In this post, we'll explore customising the rake task generator."}}},"pageContext":{"slug":"/blog/dont-give-up-on-your-rails-generators/","previous":{"fields":{"slug":"/blog/how-does-activerecord-know-the-primary-key/"},"frontmatter":{"title":"How does ActiveRecord know the primary_key?","tags":["rails"],"date":"2021-02-13","updated_date":null}},"next":{"fields":{"slug":"/blog/meta-postgres-what-constraints-does-a-table-have/"},"frontmatter":{"title":"Meta-Postgres: What constraints does a table have?","tags":["postgres"],"date":"2021-05-16","updated_date":null}},"relatedPosts":[{"node":{"fields":{"slug":"/blog/customising-generator-templates-in-rails-gems-too/"},"frontmatter":{"title":"Customising Generator Templates in Rails (Gems too!)","tags":["rails-generators"],"date":"2020-11-07T20:32:03.284Z","updated_date":null}}}],"updatedDate":"2022-07-17"}},
    "staticQueryHashes": ["2744205926","2841359383"]}