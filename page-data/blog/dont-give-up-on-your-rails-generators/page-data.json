{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/dont-give-up-on-your-rails-generators/",
    "result": {"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"65e97c7d-2e14-553f-bd43-2bfe6d31b44d","excerpt":"Many Rails devs I’ve spoken to quickly stop using the built-in generators - the common reason is that the generated files no longer suit the project, so it’s…","html":"<p>Many Rails devs I’ve spoken to quickly stop using the built-in generators - the common reason is that the generated files no longer suit the project, so it’s easier to start from scratch rather generate and then modify them. What a pity! To paraphrase DHH, generators can help <strong>improve team productivity</strong> and <strong>encourage consistency</strong> - we just need to tweak them.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A good way to get more people to do the right thing: Generate the pattern by default via built-in generators. Like we do with tests etc.</p>&mdash; DHH (@dhh) <a href=\"https://twitter.com/dhh/status/176466771698659328?ref_src=twsrc%5Etfw\">March 5, 2012</a></blockquote>\n<p>In this post, I look at one approach for customising generators, based on one we customised recently at work: the rake task generator.</p>\n<h2>TL;DR on Overriding a Generator</h2>\n<ul>\n<li>Copy over the Generator classes to <code class=\"language-text\">/lib/generators/...</code> and modify</li>\n<li>Copy over the template file to <code class=\"language-text\">/lib/templates/...</code> and modify</li>\n<li>Bonus: Use <code class=\"language-text\">hook_for</code> to generate a test file if the generator doesn’t do it automatically</li>\n</ul>\n<h2>The Problem</h2>\n<p>At work, we use rake tasks quite a fair bit, both for cron-like jobs and one-off migration or support tasks. Rails has a built-in <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/USAGE\">task generator</a>, with the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/rails g task file_name <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span></code></pre></div>\n<p>It’s never quite worked for us:</p>\n<ul>\n<li>We like to keep one task “action” per file, with the file named the same as the action - this makes it easier to grep for the task. The built-in generator requires separate <code class=\"language-text\">file_name</code> and <code class=\"language-text\">action</code> arguments, which is a little unnecessary.</li>\n<li>We sometimes namespace tasks e.g. with a “onetime” namespace for one-off tasks, but the built-in generator ignores paths in the <code class=\"language-text\">file_name</code> and also uses the <code class=\"language-text\">file_name</code> as the namespace.</li>\n<li>We write tests for our rake tasks, but the generator doesn’t create test files.</li>\n</ul>\n<p>Let’s address these! There are different approaches available, but in this case it made sense to override the generator entirely - the team wasn’t using it, so we weren’t breaking established conventions.</p>\n<h2>Overriding the Task Generator</h2>\n<p>Rails searches for generators in a <a href=\"https://guides.rubyonrails.org/generators.html#generators-lookup\">few paths</a>, so as long as we place our file in <code class=\"language-text\">/lib/generators/task/task_generator.rb</code>, Rails will load our custom file instead.</p>\n<p>We’ll copy over the original task generator to use as a base. Most of the default generators can be found in <code class=\"language-text\">railties/lib/rails/generators/rails</code>, the one we’re after is <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/task_generator.rb\">here</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token class-name\">Rails</span>\n  <span class=\"token keyword\">module</span> <span class=\"token class-name\">Generators</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskGenerator</span> <span class=\"token operator\">&lt;</span> NamedBase <span class=\"token comment\"># :nodoc:</span>\n      argument <span class=\"token symbol\">:actions</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">type</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:array</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">banner</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"action action\"</span></span>\n\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_task_files</span></span>\n        template <span class=\"token string-literal\"><span class=\"token string\">\"task.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"lib/tasks\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">file_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">.rake\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Copy it over to <code class=\"language-text\">/lib/rails/generators/task/task_generator.rb</code>. As a simple sanity check to see if we’ve overridden the class, let’s make the generator spit out a hardcoded file name and run it. Change this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">template <span class=\"token string-literal\"><span class=\"token string\">\"task.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"lib/tasks\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"hardcoded_file_name.rake\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then run the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bin/rails g task path/to/my_task\n<span class=\"token comment\"># create  lib/tasks/hardcoded_file_name.rake</span></code></pre></div>\n<p>It works! Let’s revert the hardcoding and leave the rest of the class as-is for now. We’ll be back, promise.</p>\n<h2>Overriding the Generator Template</h2>\n<p>We’ll going to be customising the template as well, so let’s override that. When invoked, generators search for templates in a different set of paths from the invoker (I explored this more in another <a href=\"https://wasabigeek.com/blog/customising-generator-templates-in-rails-gems-too/\">post</a>) - we’ll be wanting to place our template at <code class=\"language-text\">/lib/templates/rails/task/task.rb.tt</code>.</p>\n<p>Copy the <a href=\"https://github.com/rails/rails/blob/main/railties/lib/rails/generators/rails/task/templates/task.rb.tt\">original</a> and modify it as such (the lack of indentation is intentional):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>% class_path.each_with_index <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>path_fragment, index<span class=\"token operator\">|</span> -%<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>%<span class=\"token operator\">=</span> indent<span class=\"token punctuation\">(</span><span class=\"token string\">\"namespace :#{path_fragment}\"</span>, index * <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> %<span class=\"token operator\">></span> <span class=\"token keyword\">do</span>\n<span class=\"token operator\">&lt;</span>% end -%<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>% content <span class=\"token operator\">=</span> capture <span class=\"token keyword\">do</span> -%<span class=\"token operator\">></span>\ndesc <span class=\"token string\">\"TODO\"</span>\ntask <span class=\"token operator\">&lt;</span>%<span class=\"token operator\">=</span> file_name %<span class=\"token operator\">></span>: :environment <span class=\"token keyword\">do</span>\nend\n<span class=\"token operator\">&lt;</span>% end -%<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>%<span class=\"token operator\">=</span> indent<span class=\"token punctuation\">(</span>content, class_path.size * <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> %<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span>.class_path.size<span class=\"token punctuation\">)</span>.reverse_each <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>index<span class=\"token operator\">|</span> -%<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>%<span class=\"token operator\">=</span> indent<span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span>, index * <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> %<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>% end -%<span class=\"token operator\">></span></code></pre></div>\n<p>Let’s breakdown the changes. First, we’ll sort our name-spacing, including the indentation (note that <code class=\"language-text\">indent</code> is actually a private method on <code class=\"language-text\">Rails::Generators::Base</code>, so you won’t be able to use it in your regular view templates):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;% class_path.each_with_index do |path_fragment, index| -%>\n&lt;%= indent(\"namespace :#{path_fragment}\", index * 2) %> do\n&lt;% end -%>\n...\n&lt;% (0...class_path.size).reverse_each do |index| -%>\n&lt;%= indent('end', index * 2) %>\n&lt;% end -%></code></pre></div>\n<p>With the previous command <code class=\"language-text\">bin/rails g task path/to/my_task</code>, the above results in:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">namespace :path do\n  namespace :to do\n    ...\n  end\nend</code></pre></div>\n<p>Now lets sort the task itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;% content = capture do -%>\ndesc \"TODO\"\ntask &lt;%= file_name %>: :environment do\nend\n&lt;% end -%>\n&lt;%= indent(content, class_path.size * 2) %>\n...</code></pre></div>\n<p>Here, we indent the task description strings by first assigning it to a variable, <code class=\"language-text\">content</code> via the <code class=\"language-text\">capture</code> helper. Then, we indent and insert it into the file. So running the command again will give us:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">namespace :path do\n  namespace :to do\n    desc \"TODO\"\n    task my_task: :environment do\n    end\n\n  end\nend</code></pre></div>\n<p>Almost there! Our file is still being created as <code class=\"language-text\">/lib/tasks/my_task.rake</code> though, instead of <code class=\"language-text\">/lib/tasks/path/to/my_task.rake</code>.</p>\n<h2>Fixing the Generated Path</h2>\n<p>Let’s fix that. Here’s the diff for our generator:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">4,5d3</span>\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>       argument :actions, type: :array, default: [], banner: \"action action\"\n<span class=\"token prefix deleted\"><</span>\n</span><span class=\"token coord\">7c5</span>\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>         template \"task.rb\", File.join(\"lib/tasks\", \"#{file_name}.rake\")\n</span><span class=\"token coord\">---</span>\n<span class=\"token inserted-arrow inserted\"><span class=\"token prefix inserted\">></span>         template \"task.rb\", File.join(\"lib/tasks\", class_path, \"#{file_name}.rake\")</span></code></pre></div>\n<p>We’ve removed the unnecessary <code class=\"language-text\">actions</code> argument and added the <code class=\"language-text\">class_path</code> to the generated file’s path. Running the command again nests the file nicely now.</p>\n<h2>Hooking in a Test file</h2>\n<p>“Should you test rake tasks?”… is not a discussion for this article, let’s assume you do! We can customise our generator to create a test file.</p>\n<p>The method we’re looking for is <a href=\"https://api.rubyonrails.org/v6.1.3/classes/Rails/Generators/Base.html#method-c-hook_for\">hook_for</a>, which will cause the generator to attempt to also invoke other generators. Add the following DSL to your generator class:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">hook_for <span class=\"token symbol\">:test_framework</span></code></pre></div>\n<p>In short, this attempts to invoke <code class=\"language-text\">Rspec::Generators::TaskGenerator</code>, which… doesn’t exist yet. Let’s resolve that.</p>\n<h2>Adding RSpec Generator and Template</h2>\n<p>RSpec doesn’t have a custom generator for tasks, but the steps for overriding it are more or less the same. Let’s start by creating the TaskGenerator class in <code class=\"language-text\">/lib/generators/rspec/task/task_generator.rb</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># frozen_string_literal: true</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'generators/rspec'</span></span>\n\n<span class=\"token keyword\">module</span> <span class=\"token class-name\">Rspec</span>\n  <span class=\"token keyword\">module</span> <span class=\"token class-name\">Generators</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskGenerator</span> <span class=\"token operator\">&lt;</span> Base <span class=\"token comment\"># :nodoc:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create_task_specs</span></span>\n        template <span class=\"token string-literal\"><span class=\"token string\">\"task_spec.rb\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"spec/tasks\"</span></span><span class=\"token punctuation\">,</span> class_path<span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">file_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">_rake_spec.rb\"</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Next, we need to create the corresponding template in <code class=\"language-text\">/lib/templates/rspec/task/task_spec.rb.tt</code> (note: we can definitely DRY this out more, you might be able to draw some inspiration from these examples by <a href=\"https://thoughtbot.com/blog/test-rake-tasks-like-a-boss\">Thoughtbot</a> and <a href=\"https://blog.10pines.com/2019/01/14/testing-rake-tasks/\">10Pines</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'rails_helper'</span></span>\n<span class=\"token keyword\">require</span> <span class=\"token string-literal\"><span class=\"token string\">'rake'</span></span>\n\ndescribe <span class=\"token string-literal\"><span class=\"token string\">'&lt;%= class_path.join('</span></span><span class=\"token operator\">:</span><span class=\"token string-literal\"><span class=\"token string\">') %>'</span></span> <span class=\"token keyword\">do</span>\n  describe <span class=\"token string-literal\"><span class=\"token string\">':&lt;%= file_name %>'</span></span> <span class=\"token keyword\">do</span>\n    before<span class=\"token punctuation\">(</span><span class=\"token symbol\">:all</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      Rake<span class=\"token double-colon punctuation\">::</span>Task<span class=\"token punctuation\">.</span>define_task<span class=\"token punctuation\">(</span><span class=\"token symbol\">:environment</span><span class=\"token punctuation\">)</span>\n      Rake<span class=\"token punctuation\">.</span>application <span class=\"token operator\">=</span> rake <span class=\"token operator\">=</span> Rake<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n      rake<span class=\"token punctuation\">.</span>rake_require <span class=\"token string-literal\"><span class=\"token string\">'tasks/&lt;%= File.join(class_path, file_name) %>'</span></span>\n      <span class=\"token variable\">@task</span> <span class=\"token operator\">=</span> rake<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'&lt;%= class_path.concat([file_name]).join('</span></span><span class=\"token operator\">:</span><span class=\"token string-literal\"><span class=\"token string\">') %>'</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    it <span class=\"token string-literal\"><span class=\"token string\">'works'</span></span> <span class=\"token keyword\">do</span>\n      <span class=\"token variable\">@task</span><span class=\"token punctuation\">.</span>execute\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>With that done, running the generator command now creates the files just as we wanted. Neat!</p>\n<h2>Go forth and generate!</h2>\n<p>I hope this has given you some inspiration to give generators a second chance - with a little tweaking, they can be really useful in saving time for you and your team. What ideas do you have for improving your generators?</p>","frontmatter":{"title":"Don’t give up on your Rails Generators!","date":"March 14, 2021","description":"Most devs quickly stop using Rail's built-in generators. This is a pity, as generators can help improve team productivity - we just need to tweak them. In this post, we'll explore customising the rake task generator."}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"When I first came across the concept of Polymorphism in Object-Oriented Programming (OOP), it wasn’t obvious to me why it was important. The…","fields":{"slug":"/blog/why-is-polymorphism-important/"},"frontmatter":{"date":"March 20, 2022","title":"Why use Polymorphism in OOP?","description":"Polymorphism in Object-Oriented Programming, while abstract, is still somewhat easy to understand. Why we should use it, though, is less obvious. Let's investigate polymorphism's benefits!"}}},{"node":{"excerpt":"”A class should only have one reason to change” is a mantra that Object-Oriented advocates have chanted for years. Dubbed the “Single…","fields":{"slug":"/blog/what-does-a-1972-paper-have-to-do-with-the-single-responsibility-principle/"},"frontmatter":{"date":"February 28, 2022","title":"A 1972 paper and the Single Responsibility Principle","description":"While trying to explain the Single Responsibility Principle, it's originator calls attention to the paper 'On the Criteria To Be Used in Decomposing Systems into Modules'. Why was this paper so significant? Let's find out!"}}},{"node":{"excerpt":"Whether out of curiosity or trying to understand a method for debugging, it’s helpful to know how to dig into a Ruby gem. Recently I was…","fields":{"slug":"/blog/reading-a-ruby-gem-with-vscode/"},"frontmatter":{"date":"February 15, 2022","title":"Reading a Ruby gem with VSCode","description":"Steps to try when investigating a gem's implementation in VSCode, using mocha's any_instance as an example."}}}]}},"pageContext":{"slug":"/blog/dont-give-up-on-your-rails-generators/","previous":{"fields":{"slug":"/blog/how-does-activerecord-know-the-primary-key/"},"frontmatter":{"title":"How does ActiveRecord know the primary_key?","tags":null}},"next":{"fields":{"slug":"/blog/meta-postgres-what-constraints-does-a-table-have/"},"frontmatter":{"title":"Meta-Postgres: What constraints does a table have?","tags":["postgres"]}},"relatedPosts":[]}},
    "staticQueryHashes": ["2744205926","2841359383"]}