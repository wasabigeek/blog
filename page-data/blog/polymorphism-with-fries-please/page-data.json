{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/polymorphism-with-fries-please/","result":{"data":{"site":{"siteMetadata":{"title":"wasabigeek"}},"markdownRemark":{"id":"401eea75-2f0c-59fa-8db0-9e3bff59098f","excerpt":"Imagine you’re the chef-owner of a new food truck. You’re the only staff for now, so you do everything, taking the order and making it: After some coverage in…","html":"<p>Imagine you’re the chef-owner of a new food truck. You’re the only staff for now, so you do everything, taking the order and making it:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n    toast_buns\n    grill_patties\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"tacos\"</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>After some coverage in the local news, an investor has approached you to expand into a nationwide chain. As you hire new staff, you first try teaching them to operate the way you do i.e. they know how to do everything:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FastFoodOutletStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"tacos\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FoodTruckStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"tacos\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This works, but there are problems. Sure, new staff have to be taught everything, but that’s not the thing that bothers you the most. You’re trying to innovate - tweaking recipes, adding new menu items. But when you change or add a new recipe, you have to retrain everyone, which is error prone:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FastFoodOutletStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n      butter_buns\n      grill_buns\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"tacos\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"fried rice\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FoodTruckStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n\t  <span class=\"token comment\"># Oh no! Forgot to teach about buttering before grilling.</span>\n      <span class=\"token comment\"># Now customers are complaining about a lot of burnt buns!</span>\n      grill_buns\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">elsif</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"tacos\"</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\"># Oh no! Forgot to teach the new menu item.</span>\n    <span class=\"token comment\"># Now customers are complaining that fried rice isn't available!</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>After a while, <strong>it feels really hard to change things, and you feel hesitant to add new menu items</strong>. To solve this, you decide to have individual KitchenStaff specialised in each menu item. That way, only the relevant staff need to be retrained:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BurgerDude</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">KitchenStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_burger</span></span>\n    <span class=\"token comment\"># Nice, now every BurgerDude will know to butter buns before grilling!</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FriedRiceGal</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">KitchenStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_fried_rice</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TacoCat</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>There’s a problem here though - because each staff is specialised, customers would have to know which staff to talk to, and what to tell them!</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span>\n  <span class=\"token comment\"># def get_lunch_v1</span>\n  <span class=\"token comment\">#   FoodTruckStaff.new.handle_order(\"fried rice\")</span>\n  <span class=\"token comment\"># end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_lunch_v2</span></span>\n\t<span class=\"token constant\">BurgerDude</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>make_fried_rice <span class=\"token comment\"># => NotMyJobError</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>So you do two things:</p>\n<ol>\n<li>Add a Signboard, which tells Customers who to talk to for each order. This way, Customers don’t need to remember who to talk to.</li>\n<li>Train each KitchenStaff to take orders the same way, so Customers can talk to them the same way regardless of their orders.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Signboard</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">find_staff_for</span></span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> item_name <span class=\"token operator\">==</span> <span class=\"token string\">\"burger\"</span>\n      <span class=\"token constant\">BurgerDude</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BurgerDude</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">KitchenStaff</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span>\n    make_burger\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">get_lunch</span></span>\n\t<span class=\"token constant\">Signboard</span><span class=\"token punctuation\">.</span>find_staff_for<span class=\"token punctuation\">(</span><span class=\"token string\">\"burger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>handle_order\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Seems like you’re in a good place now - regardless of whether it’s a food truck or fast food outlet, it’ll be easier to make changes to the menu! Although you’d have to teach Customers a new way of ordering, it’s a one-time cost and you feel the benefits outweigh it.</p>\n<p>And then you think - wait a minute, how do all these people fit into a food truck? And I don’t actually want customers to talk directly to the kitchen staff, do I? Which is the exact point you wake up and realise it was all a dream, and the point where this analogy starts to break down.</p>\n<h2>Afterword</h2>\n<p>This is just one example of how you might take advantage of Polymorphism, albeit a common one - in Martin Fowler’s <a href=\"https://martinfowler.com/books/refactoring.html\">Refactoring</a>, this is “Replace Conditional with Polymorphism”, and you’ll see Sandi Metz do something similar in her <a href=\"https://www.youtube.com/watch?v=8bZh5LMaSmE\">All the Little Things</a> talk. The <em>actual</em> Polymorphism in this story is really just how all KitchenStaff can take orders the same way (<code class=\"language-text\">handle_order</code>).</p>\n<p>Polymorphism, in my own words, is about being able to talk to different objects the same way. Concretely, this means the objects share an interface and have some common methods. This is sometimes referred to as sharing the same “role”. For example, each <code class=\"language-text\">KitchenStaff</code> above could be said to play the role of “Orderable” (represented as a contrived module below):</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Orderable</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_order</span></span>\n    public_send<span class=\"token punctuation\">(</span><span class=\"token symbol\">:prepare_method</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">prepare_method</span></span>\n    <span class=\"token keyword\">raise</span> <span class=\"token constant\">NotImplementedError</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BurgerDude</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">Orderable</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">prepare_method</span></span>\n    <span class=\"token symbol\">:make_burger</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_burger</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As we saw in the analogy, the benefit of Polymorphism is it can help us hide knowledge about underlying classes from callers, making it easier to change the underlying logic without breaking things. The cost is more classes for the programmer to deal with.</p>\n<p>I think it’s worth mentioning that because it’s about roles, seemingly unrelated objects could still be polymorphic. For example, most objects in Ruby have a <code class=\"language-text\">inspect</code> instance method, which is used when printing the object:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">irb(main):001:0&gt; class KitchenStaff; end\nirb(main):002:0&gt; p KitchenStaff\n=&gt; KitchenStaff\nirb(main):003:1* def KitchenStaff.inspect\nirb(main):004:1*   &quot;I am a KitchenStaff&quot;\nirb(main):005:0&gt; end\nirb(main):006:0&gt; p KitchenStaff\n=&gt; I am a KitchenStaff</code></pre></div>\n<p>So don’t limit Polymorphic thinking to just things that have an “is a” relationship (subclasses)! What other examples do you have that take advantage of Polymorphism?</p>","frontmatter":{"title":"Polymorphism, with fries please","date":"February 19, 2022","description":"One way to advantage of Polymorphism, explained through the eyes of a growing food business."}}},"pageContext":{"slug":"/blog/polymorphism-with-fries-please/","previous":{"fields":{"slug":"/blog/reading-a-ruby-gem-with-vscode/"},"frontmatter":{"title":"Reading a Ruby gem with VSCode"}},"next":null}},"staticQueryHashes":["1003244115","2841359383"]}